select * from Orders

-- String functions

-- LEN FUN CALCULATES LENGTH OF STRING
SELECT Order_ID, Customer_Name, LEN(Customer_Name) AS LEN_NAME,
LEN (' Claire Gute ')
FROM Orders;

-- LEN FUN CALCULATES LENGTH OF STRING (ALSO CALCULATE LEADING SPACES)
SELECT Order_ID, Customer_Name, LEN(Customer_Name) AS LEN_NAME,
LEN ('   Claire Gute')
FROM Orders;

-- LEFT 4 LETTERS
SELECT Order_ID, Customer_Name,
LEFT (Customer_Name, 4) AS LETTERS
FROM Orders;

-- RIGHT 4 LETTERS
SELECT Order_ID, Customer_Name,
RIGHT (Customer_Name, 4) AS LETTERS
FROM Orders;

-- SUBSTRING (COL, START POS, LEN)
SELECT Order_ID, Customer_Name,
SUBSTRING (Customer_Name, 4, 6) AS LETTERS
FROM Orders;

--CHAR INDEX (GIVES POS OF CHAR)
SELECT Order_ID, Customer_Name, 
CHARINDEX  (' ', Customer_Name) AS POS_SPACE
FROM Orders;

--CHAR INDEX (GIVES POS OF CHAR) - if char is repeating gives first occurrence	
SELECT Order_ID, Customer_Name, 
CHARINDEX  ('n', Customer_Name) AS POS_SPACE
FROM Orders;

-- CONCAT
SELECT Order_Date, Ship_Date, CONCAT(Ship_Date,' ', Category,'- ', Product_Name) AS INFO
FROM Orders

--REPLACE
SELECT Order_ID, REPLACE(Order_ID, 'CA', 'JM') AS NEW_ORDERID
FROM Orders

select * from Orders

--REPLACE - WILL REPLACE ALL A WITH Z
SELECT Customer_ID, Customer_Name, REPLACE(Customer_Name, 'A', 'Z') AS NEW_CUST
FROM Orders

-- TRANSLATE C-> G, G->E 1-1 MAPPING
SELECT Customer_ID, TRANSLATE(Customer_ID, 'CGBH', 'GEET')
FROM Orders

-- REVERSE
SELECT Ship_Mode, REPLACE(Ship_Mode, ' ', ' ? ') AS REPLACED
FROM Orders

-- TRIM REMOVES LEADING 7 TRAILING SPACE
SELECT Ship_Mode, TRIM(Ship_Mode) AS REPLACED
FROM Orders

-- NULL HANDLING
SELECT Order_ID, CITY, ISNULL(CITY, 'UNKNOWN') AS NEW_CITY
FROM Orders
ORDER BY CITY

--COALESCE - WE CANN PASS MORE THAN 2 ARG 
SELECT Order_ID, CITY,  ISNULL(CITY, 'UNKNOWN') AS NEW_CITY, STATE,
COALESCE(CITY, STATE, REGION ,'UNKNOWN') AS NEWW_CITY
FROM Orders
ORDER BY CITY

-- CAST
SELECT TOP 5 Order_ID, SALES, CAST(Sales AS INT) AS SALES_INT
FROM ORDERS

-- ROUND
SELECT TOP 5 Order_ID, SALES, ROUND(Sales, 2) AS SALES_INT
FROM ORDERS

--SET QUERIES

SELECT * FROM ORDERS_WEST
SELECT * FROM ORDERS_EAST
CREATE TABLE ORDERS_WEST ( ORDER_ID INT, REGION VARCHAR(10), SALES INT)
CREATE TABLE ORDERS_EAST ( ORDER_ID INT, REGION VARCHAR(10), SALES INT)

INSERT INTO ORDERS_WEST VALUES (1, 'WEST', 100), (2, 'WEST', 200)
INSERT INTO ORDERS_EAST VALUES (3, 'EAST', 100), (4, 'EAST', 300)
INSERT INTO ORDERS_WEST VALUES (3, 'EAST', 100)

-- UNION ALL : DATA TYPE SHOULD BE COMPATIBLE, PRINTS ALL DATA W DUPLICATES
SELECT * FROM ORDERS_WEST
UNION ALL
SELECT * FROM ORDERS_EAST

-- UNION - REMOVES DUPLICATES
SELECT * FROM ORDERS_WEST
UNION 
SELECT * FROM ORDERS_EAST

-- INTERSECT -- FIRST EMOVES DUPLICATES
SELECT * FROM ORDERS_WEST
INTERSECT
SELECT * FROM ORDERS_EAST


-- MINUS/ EXCEPT -- FIRST REMOVES DUPS
SELECT * FROM ORDERS_WEST
EXCEPT
SELECT * FROM ORDERS_EAST






















